pipeline:
  identifier: Build_go_pipeline_sample_1695203410924
  name: Build go-pipeline-sample
  orgIdentifier: default
  projectIdentifier: default_project
  properties:
    ci:
      codebase:
        build: <+input>
        connectorRef: account.Github_OAuth_1695203390848
        repoName: Dipchandan-kalita/go-pipeline-sample
  stages:
    - stage:
        identifier: build
        name: build
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  identifier: gobuild
                  name: go_build
                  spec:
                    command: go build
                  timeout: ""
                  type: Run
              - step:
                  identifier: gotest
                  name: go_test
                  spec:
                    shell: Sh
                    command: "package main\n\nimport \"testing\"\n\nfunc TestGreetingSpecificJohn(t *testing.T) {\n\tgreeting := CreateGreeting(\"John\")\n\tif greeting != \"Hello, John\\n\" {\n\t\tt.Errorf(\"Greeting was incorrect, got: %s, want: %s.\", greeting, \"Hello, John\\n\")\n\t}\n}\n\nfunc TestGreetingSpecificDemo(t *testing.T) {\n\tgreeting := CreateGreeting(\"Demo\")\n\tif greeting != \"Hello, Demo\\n\" {\n\t\tt.Errorf(\"Greeting was incorrect, got: %s, want: %s.\", greeting, \"Hello, Demo\\n\")\n\t}\n}\n\nfunc TestShowFailure(t *testing.T) {\n\tgreeting := CreateGreeting(\"Demo1\")\n\tif greeting != \"Hello, Demo\\n\" {\n\t\tt.Errorf(\"Intentional failure. got: %s, want: %s.\", greeting, \"Hello, Demo\\n\")\n\t}\n}\n\n\n\nfunc TestGreetingDefault(t *testing.T) {\n\tgreeting := CreateGreeting(\"\")\n\tif greeting != \"Hello, Guest\\n\" {\n\t\tt.Errorf(\"Greeting was incorrect, got: %s, want: %s.\", greeting, \"Hello, Guest\\n\")\n\t}\n}\n "
                  timeout: ""
                  type: Run
              - step:
                  identifier: dockerbuild
                  name: docker_build
                  spec:
                    connectorRef: account.harnessImage
                    image: plugins/docker
                    settings:
                      dry_run: "true"
                      repo: hello/world
                      tags: latest
                  timeout: ""
                  type: Plugin
          platform:
            arch: Amd64
            os: Linux
          runtime:
            spec: {}
            type: Cloud
        type: CI
